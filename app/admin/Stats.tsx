import * as FileSystem from 'expo-file-system';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import React, { useState } from 'react';
import { ActivityIndicator, Alert, Platform, Text, TouchableOpacity, View } from 'react-native';
import HeaderAuth from '../../components/HeaderAuth';

export default function Stats() {
  const [isGenerating, setIsGenerating] = useState(false);

  // Function to generate PDF content (HTML format)
  const generatePDFContent = () => {
    const statsData = {
      title: "Monthly Statistics Report",
      date: new Date().toLocaleDateString(),
      metrics: [
        { name: "Total Users", value: 1245, change: "+12%" },
        { name: "Active Sessions", value: 892, change: "+5%" },
        { name: "Conversion Rate", value: "3.2%", change: "-0.4%" },
        { name: "Revenue", value: "$12,450", change: "+8%" },
      ]
    };

    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Statistics Report</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1 { color: #2c3e50; text-align: center; margin-bottom: 10px; }
            .report-date { text-align: center; margin-bottom: 30px; color: #7f8c8d; }
            .metrics-container { max-width: 600px; margin: 0 auto; }
            .metric { margin-bottom: 15px; padding: 15px; background: #f9f9f9; border-radius: 5px; }
            .metric-name { font-weight: bold; font-size: 16px; margin-bottom: 5px; }
            .metric-value { font-size: 24px; color: #2c3e50; }
            .metric-change { font-size: 14px; }
            .positive { color: #27ae60; }
            .negative { color: #e74c3c; }
            .footer { margin-top: 30px; text-align: center; color: #95a5a6; font-size: 12px; }
          </style>
        </head>
        <body>
          <h1>${statsData.title}</h1>
          <div class="report-date">Generated on ${statsData.date}</div>
          
          <div class="metrics-container">
            ${statsData.metrics.map(metric => `
              <div class="metric">
                <div class="metric-name">${metric.name}</div>
                <div class="metric-value">${metric.value}</div>
                <div class="metric-change ${metric.change.startsWith('+') ? 'positive' : 'negative'}">
                  ${metric.change} from last period
                </div>
              </div>
            `).join('')}
          </div>
          
          <div class="footer">
            <p>Generated by MyApp - ${new Date().getFullYear()}</p>
          </div>
        </body>
      </html>
    `;
  };

  const handleDownloadPress = async () => {
    if (Platform.OS === 'android') {
      Alert.alert(
        'Save Report',
        'You will be asked to select a location to save the PDF file',
        [
          { text: 'Cancel', style: 'cancel' },
          { text: 'Continue', onPress: handleDownload }
        ]
      );
    } else {
      handleDownload();
    }
  };

  const handleDownload = async () => {
    setIsGenerating(true);
    
    try {
      // 1. Generate the PDF from HTML
      const { uri: pdfUri } = await Print.printToFileAsync({
        html: generatePDFContent(),
        width: 612,   // US Letter width (8.5in)
        height: 792,  // US Letter height (11in)
        base64: false
      });

      // 2. Handle platform-specific saving
      const fileName = `Statistics_Report_${new Date().toISOString().slice(0, 10)}.pdf`;
      
      if (Platform.OS === 'android') {
        // Android: Use Storage Access Framework
        try {
          const permissions = await FileSystem.StorageAccessFramework.requestDirectoryPermissionsAsync();
          
          if (!permissions.granted) {
            Alert.alert('Permission required', 'You need to grant permission to save the file');
            return;
          }

          const fileUri = await FileSystem.StorageAccessFramework.createFileAsync(
            permissions.directoryUri,
            fileName,
            'application/pdf'
          );

          // Read the generated PDF and write to new location
          const pdfData = await FileSystem.readAsStringAsync(pdfUri, {
            encoding: FileSystem.EncodingType.Base64
          });

          await FileSystem.writeAsStringAsync(fileUri, pdfData, {
            encoding: FileSystem.EncodingType.Base64
          });

          Alert.alert(
            'Success',
            `PDF saved successfully as ${fileName}`,
            [{ text: 'OK' }]
          );
        } catch (error) {
          console.error('Android save error:', error);
          // Fallback to sharing if direct save fails
          await Sharing.shareAsync(pdfUri, {
            mimeType: 'application/pdf',
            dialogTitle: 'Share Statistics Report',
          });
        }
      } else {
        // iOS: Save to app's document directory and share
        const newUri = `${FileSystem.documentDirectory}${fileName}`;
        await FileSystem.copyAsync({ from: pdfUri, to: newUri });
        
        if (await Sharing.isAvailableAsync()) {
          await Sharing.shareAsync(newUri, {
            mimeType: 'application/pdf',
            dialogTitle: 'Download Statistics Report',
            UTI: 'com.adobe.pdf'
          });
        } else {
          Alert.alert('Success', 'PDF generated successfully');
        }
      }
    } catch (error) {
      console.error('Error generating PDF:', error);
      Alert.alert('Error', 'Failed to generate PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <>
      <HeaderAuth />
      
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <Text style={{ fontSize: 24, marginBottom: 40 }}>Descargar Estad√≠sticas</Text>
        
        <TouchableOpacity 
          onPress={handleDownloadPress}
          disabled={isGenerating}
          style={{
            backgroundColor: '#1e40af',
            padding: 20,
            borderRadius: 30,
            opacity: isGenerating ? 0.6 : 1
          }}
        >
          {isGenerating ? (
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <ActivityIndicator color="white" />
              <Text style={{ color: 'white', marginLeft: 10, fontSize: 18 }}>
                Generando...
              </Text>
            </View>
          ) : (
            <Text style={{ color: 'white', fontSize: 18 }}>Descargar PDF</Text>
          )}
        </TouchableOpacity>
      </View>
    </>
  );
}